//
//	メルセンヌ・ツイスタ法による擬似乱数
//  (http://www.math.keio.ac.jp/~matumoto/mt.html)
//

//==============================================================
#ifndef CO_RANDOM_H
#define CO_RANDOM_H
//==============================================================

#include "co_common.h"

#ifdef __cplusplus
extern              "C"
{
#endif

/********************************************/
/*             定数・マクロ宣言             */
/********************************************/
enum enmRND_CH {
	RND_CH0,
	RND_CH1,

	//--------------
	RND_CHNUM,
};

#define RANDOM_SEED  0x12345678					// 擬似乱数初期 seed


//------------------------------
// !!! 以下のマクロを使う !!!
//------------------------------
// 0 <= r < max
#define RndI(max)  ( genrand_int32(RND_CH0) % (max) )
//  0.0f <= r <= +1.0f
#define Rnd()      genrand_real2(RND_CH0)
// -1.0f <= r < +1.0f
#define Rndm()     ( Rnd() * 2.0f - 1.0f )

// 0 <= r < max
#define RndICH(ch, max)  ( genrand_int32(ch) % (max) )
//  0.0f <= r <= +1.0f
#define RndCH(ch)        genrand_real2(ch)
// -1.0f <= r < +1.0f
#define RndmCH(ch)       ( RndCH(ch) * 2.0f - 1.0f )


/********************************************/
/*                構造体宣言                */
/********************************************/


/********************************************/
/*              グローバル変数              */
/********************************************/


/********************************************/
/*              グローバル関数              */
/********************************************/
// 初期化
extern void RandomInit(void);

// 乱数テーブルの初期化
extern void init_genrand(int ch, u_int s);
// 32bit 符号無乱数を得る
extern u_int genrand_int32(int ch);
// 0.0f <= r  <= 1.0f の区間の乱数を得る
extern REAL genrand_real1(int ch);
// 0.0f <= r  < 1.0f の区間の乱数を得る
extern REAL genrand_real2(int ch);
// 0.0f < r  < 1.0f の区間の乱数を得る
extern REAL genrand_real3(int ch);


//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// インライン関数群
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

//==============================================================
static REAL RndRange(REAL max, REAL min)
//--------------------------------------------------------------
// 一定範囲内の乱数
//--------------------------------------------------------------
// in:	max = 最大値
//		min = 最小値
//--------------------------------------------------------------
// out:	生成された値
//==============================================================
{
	 return (max - min) * Rnd() + min;
}

//==============================================================
static REAL RndRangeCH(int ch, REAL max, REAL min)
//--------------------------------------------------------------
// 一定範囲内の乱数
//--------------------------------------------------------------
// in:	ch  = enmRND_CH
//		max = 最大値
//		min = 最小値
//--------------------------------------------------------------
// out:	生成された値
//==============================================================
{
	 return (max - min) * RndCH(ch) + min;
}

#ifdef __cplusplus
}
#endif
//==============================================================
#endif
//==============================================================

